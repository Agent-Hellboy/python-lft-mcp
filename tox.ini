[tox]
envlist = 
    py{39,310,311,312,313}
    lint
    format
    format-check
    type
    coverage
skip_missing_interpreters = true
isolated_build = true

[testenv]
description = Run tests with pytest
deps = 
    pytest>=7.0.0
    pytest-asyncio>=0.21.0
    pytest-cov>=4.0.0
    pytest-mock>=3.10.0
extras = dev
commands = 
    pytest {posargs:tests} -v --tb=short

[testenv:lint]
description = Run linting with ruff
deps = 
    ruff>=0.1.0
extras = dev
commands = 
    ruff check python_lft/ tests/

[testenv:format]
description = Format code with ruff (includes import sorting)
deps = 
    ruff>=0.1.0
commands = 
    ruff check --fix python_lft/ tests/ examples/
    ruff format python_lft/ tests/ examples/

[testenv:format-check]
description = Check code formatting without making changes
deps = 
    ruff>=0.1.0
commands = 
    ruff check python_lft/ tests/ examples/
    ruff format --check python_lft/ tests/ examples/

[testenv:type]
description = Run type checking with mypy
deps = 
    mypy>=1.0.0
    types-PyYAML>=6.0.0
extras = dev
commands = 
    mypy python_lft/ --ignore-missing-imports --ignore-errors --allow-untyped-defs --allow-incomplete-defs --allow-any-generics --disable-error-code=no-any-return,attr-defined,call-arg,return

[testenv:coverage]
description = Run tests with coverage reporting
deps = 
    pytest>=7.0.0
    pytest-asyncio>=0.21.0
    pytest-cov>=4.0.0
    coverage[toml]>=7.0.0
    codecov>=2.1.0
extras = dev
commands = 
    pytest tests/ --cov=python_lft --cov-report=html --cov-report=xml --cov-report=term
    coverage report --show-missing --fail-under=80

[testenv:build]
description = Build package for distribution
deps = 
    build>=0.10.0
    twine>=4.0.0
commands = 
    python -m build
    twine check dist/*

[testenv:clean]
description = Clean build artifacts and cache files
deps = 
allowlist_externals = 
    rm
    find
commands = 
    rm -rf build/
    rm -rf dist/
    rm -rf *.egg-info/
    rm -rf .pytest_cache/
    rm -rf .coverage
    rm -rf htmlcov/
    rm -rf .mypy_cache/
    rm -rf .ruff_cache/
    find . -type d -name __pycache__ -exec rm -rf {} +
    find . -type f -name "*.pyc" -delete

[testenv:all]
description = Run comprehensive testing (lint, format-check, test, coverage)
deps = 
    {[testenv:lint]deps}
    {[testenv:format-check]deps}
    {[testenv:coverage]deps}
extras = dev
commands = 
    {[testenv:lint]commands}
    {[testenv:format-check]commands}
    {[testenv:coverage]commands}

# Test environments for specific Python versions with minimal deps
[testenv:py39-min]
description = Test with Python 3.9 and minimal dependencies
basepython = python3.9
deps = 
    pytest>=7.0.0
    pytest-asyncio>=0.21.0
commands = pytest {posargs:tests} -v

[testenv:py313-dev]
description = Test with Python 3.13 and latest dependencies
basepython = python3.13
deps = 
    pytest
    pytest-asyncio
    pytest-cov
extras = dev
commands = pytest {posargs:tests} -v --cov=python_lft

# Specialized testing environments
[testenv:integration]
description = Run integration tests against real projects
deps = 
    {[testenv]deps}
setenv = 
    INTEGRATION_TESTS=1
commands = 
    pytest tests/integration/ -v --tb=short {posargs}

# Configuration for pytest
[pytest]
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*
addopts = 
    -ra
    -q
    --strict-markers
    --strict-config
    --tb=short
markers = 
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    performance: marks tests as performance benchmarks
    unit: marks tests as unit tests

# Configuration for coverage
[coverage:run]
source = python_lft
omit = 
    tests/*
    testonproj/*
    */migrations/*
    venv/*
    .venv/*
    .tox/*

[coverage:report]
exclude_lines = 
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml
