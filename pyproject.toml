[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "python-lft-mcp"
version = "1.0.0"
description = "Python Lint, Format, Test (LFT) - Model Context Protocol Server for intelligent Python development tools"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Agent-Hellboy", email = "agent.hellboy@example.com"}
]
maintainers = [
    {name = "Agent-Hellboy", email = "agent.hellboy@example.com"}
]
keywords = [
    "python", "linting", "formatting", "testing", "mcp", "development-tools", 
    "code-quality", "automation", "ruff", "black", "pytest", "mypy", "pylint"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",

    "Programming Language :: Python :: 3.10", 
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Text Processing :: Linguistic",
    "Environment :: Console",
    "Operating System :: OS Independent",
]
requires-python = ">=3.10"
dependencies = [
    "mcp>=0.9.0",
    "tomli>=2.0.0; python_version < '3.11'",
    "PyYAML>=6.0.0",
    "pytest-asyncio>=0.21.0",
]

[project.optional-dependencies]
# Development tools (these are what the MCP server can work with)
tools = [
    "ruff>=0.1.0",
    "black>=23.0.0", 
    "pytest>=7.0.0",
    "mypy>=1.0.0",
    "pylint>=2.15.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "bandit>=1.7.0",
    "autopep8>=2.0.0",
    "yapf>=0.32.0",
    "nose2>=0.12.0",
    "pydocstyle>=6.0.0",
]

# Development dependencies for working on the MCP server itself
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "types-PyYAML>=6.0.0",
    "coverage[toml]>=7.0.0",
    "codecov>=2.1.0",
    "tox>=4.0.0",
    "build>=0.10.0",
    "twine>=4.0.0",
]

# All optional dependencies
all = [
    "python-lft-mcp[tools,dev]"
]

[project.urls]
Homepage = "https://github.com/Agent-Hellboy/python-lft-mcp"
Documentation = "https://github.com/Agent-Hellboy/python-lft-mcp#readme"
Repository = "https://github.com/Agent-Hellboy/python-lft-mcp.git"
Issues = "https://github.com/Agent-Hellboy/python-lft-mcp/issues"
Changelog = "https://github.com/Agent-Hellboy/python-lft-mcp/blob/main/CHANGELOG.md"

[project.scripts]
python-lft-mcp = "python_lft.cli:main"
python-lft-config = "python_lft.config_generator:main"

[project.entry-points."mcp.servers"]
python-lft = "python_lft.app:create_mcp"

[tool.setuptools.packages.find]
where = ["."]
include = ["python_lft*"]
exclude = ["tests*", "testonproj*"]

[tool.setuptools.package-data]
python_lft = ["py.typed"]

# ============================================================================
# Tool Configuration for the MCP Server itself
# ============================================================================

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
force-single-line = false
combine-as-imports = true
lines-after-imports = 2
known-first-party = ["python_lft"]

[tool.black]
target-version = ["py39", "py310", "py311", "py312", "py313"]
line-length = 88
skip-string-normalization = false
skip-magic-trailing-comma = false

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["python_lft"]
omit = [
    "tests/*",
    "testonproj/*",
    "*/migrations/*",
    "venv/*",
    ".venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pylint.main]
load-plugins = []
jobs = 0

[tool.pylint.messages_control]
disable = [
    "C0103",  # invalid-name
    "C0111",  # missing-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0613",  # unused-argument
    "C0301",  # line-too-long (handled by black)
]

[tool.pylint.format]
max-line-length = 88

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["python_lft"]
forced_separate = ["tests"]
combine_as_imports = true
